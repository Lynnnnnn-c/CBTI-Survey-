
import React, { useState } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import { QuizResult } from '@/entities/QuizResult';
import { quizQuestions } from '../components/quiz/quizData';
import { calculateCbtiProfile } from '../components/quiz/quizLogic'; // Import the centralized logic
import QuestionCard from '../components/quiz/QuestionCard';
import ResultsDisplay from '../components/quiz/ResultsDisplay';
import { Brain, ChevronLeft } from 'lucide-react';

export default function Quiz() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [cbtiResult, setCbtiResult] = useState(null);
  const [indexHistory, setIndexHistory] = useState([0]); // Track question index history for back button

  const currentQuestion = quizQuestions[currentQuestionIndex];
  
  // All calculation logic has been moved to quizLogic.js
  // The calculateCBTI function is now removed from this file.

  const handleAnswer = async (score) => {
    const newAnswer = {
      question_id: currentQuestion.id,
      score: score // Score is now the raw value or a sub-answer object
    };
    
    const updatedAnswers = [...answers, newAnswer];
    setAnswers(updatedAnswers);

    let nextIndex = currentQuestionIndex + 1;

    // Special skip logic for Question 1 (Risk Attitude)
    if (currentQuestion.id === 1 && score >= 7) {
      const lastRiskQuestionIndex = quizQuestions.findLastIndex(q => q.dimension === 'risk_attitude');
      if (lastRiskQuestionIndex !== -1) {
        nextIndex = lastRiskQuestionIndex + 1;
      }
    }

    // Skip logic for Question 9 (Time Horizon)
    if (currentQuestion.id === 9) {
      // We need to determine the mapped score to apply the skip logic correctly.
      const questionData = currentQuestion; // currentQuestion is already the question with id 9
      let mappedScore = 0;
      if (questionData && questionData.scoreMapping) {
          // 'score' here is the raw value from the slider (1-7)
          // The index in scoreMapping corresponds to the raw score minus the starting value (usually 1)
          const index = score - questionData.scaleOptions[0].value;
          if (index >= 0 && index < questionData.scoreMapping.length) {
              mappedScore = questionData.scoreMapping[index];
          }
      }

      if (mappedScore > 4) {
          // Skip questions 10 and 11, jump to question 12 (information preference)
          // The question with ID 12 is at index 11 of the quizQuestions array.
          nextIndex = 11;
      }
    }

    if (nextIndex >= quizQuestions.length) {
      // Quiz is finished, calculate results using the centralized function
      const result = calculateCbtiProfile(updatedAnswers);
      
      // Save to database
      try {
        await QuizResult.create({
          cbti_code: result.cbtiCode,
          user_answers: updatedAnswers, // Save the raw answers
          dimension_scores: result.dimensionScores
        });
      } catch (error) {
        console.error('Error saving quiz result:', error);
      }

      setCbtiResult(result);
      setShowResults(true);
    } else {
      setCurrentQuestionIndex(nextIndex);
      setIndexHistory([...indexHistory, nextIndex]); // Save new index to history
    }
  };

  const handleBack = () => {
    if (indexHistory.length <= 1) return; // Cannot go back from the first question

    // To allow re-answering, we remove the last answer and the last question from history.
    const newAnswers = answers.slice(0, -1);
    const newHistory = indexHistory.slice(0, -1);
    const prevIndex = newHistory[newHistory.length - 1];

    setAnswers(newAnswers);
    setIndexHistory(newHistory);
    setCurrentQuestionIndex(prevIndex);
  };

  const handleRestart = () => {
    setCurrentQuestionIndex(0);
    setAnswers([]);
    setShowResults(false);
    setCbtiResult(null);
    setIndexHistory([0]); // Reset history
  };

  if (showResults && cbtiResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-amber-50/30 to-slate-100 p-4 md:p-8">
        <div className="container mx-auto py-8">
          <ResultsDisplay 
            profile={cbtiResult.profile} 
            onRestart={handleRestart}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-amber-50/30 to-slate-100 p-4 md:p-8">
      <div className="container mx-auto py-8">
        {/* Header */}
        {currentQuestionIndex === 0 && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-12"
          >
            <div className="flex items-center justify-center gap-3 mb-6">
              <div className="w-16 h-16 bg-gradient-to-br from-amber-500 to-amber-600 rounded-2xl flex items-center justify-center shadow-lg">
                <Brain className="w-8 h-8 text-white" />
              </div>
              <div className="text-left">
                <h1 className="text-3xl md:text-4xl font-bold text-slate-900">CBTI 測驗</h1>
                <p className="text-slate-600">發現你的加密投資人格</p>
              </div>
            </div>
            <div className="max-w-2xl mx-auto">
              <p className="text-lg text-slate-700 leading-relaxed">
                通過我們的12題綜合評估，發現你獨特的加密投資人格類型並獲得個人化策略建議。
              </p>
            </div>
          </motion.div>
        )}

        {/* Quiz Content */}
        <AnimatePresence mode="wait">
          <QuestionCard
            key={currentQuestion.id}
            question={currentQuestion}
            onAnswer={handleAnswer}
            onBack={handleBack} // Pass the handleBack function
            currentQuestion={currentQuestionIndex + 1}
            totalQuestions={quizQuestions.length}
          />
        </AnimatePresence>

        {/* Footer */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.8 }}
          className="text-center mt-12"
        >
          <p className="text-sm text-slate-500">
            Powered by SuperIntent • CBTI Personality Framework
          </p>
        </motion.div>
      </div>
    </div>
  );
}
