
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';

// Update scale options for decision style questions
const getScaleOptions = (dimension) => {
  if (dimension === "decision_style") {
    return [
      { label: '從不', value: 1 },
      { label: '很少', value: 2 },
      { label: '偶爾', value: 3 },
      { label: '經常', value: 4 },
      { label: '總是', value: 5 },
    ];
  } else {
    return [
      { label: '完全不影響', value: 1 },
      { label: '稍有影響', value: 2 },
      { label: '有影響', value: 3 },
      { label: '高度影響', value: 4 },
      { label: '非常關鍵', value: 5 },
    ];
  }
};

const SubQuestion = ({ sub, value, onChange, dimension }) => {
  const scaleOptions = getScaleOptions(dimension);
  const currentLabel = scaleOptions.find(opt => opt.value === value)?.label || '請選擇';
  const minLabel = scaleOptions[0].label;
  const maxLabel = scaleOptions[scaleOptions.length - 1].label;

  return (
    <div className="py-6 border-b border-slate-200 last:border-b-0">
      <p className="font-medium text-slate-700 mb-4 text-left">{sub.text}</p>
      <div className="px-2">
        <Slider
          defaultValue={[3]}
          min={1}
          max={5}
          step={1}
          onValueChange={(val) => onChange(sub.id, val[0])}
          className="py-2"
        />
        <div className="flex justify-between text-xs text-slate-500 mt-2">
          <span>{minLabel}</span>
          <span>{maxLabel}</span>
        </div>
        <div className="text-center text-base font-semibold text-amber-700 h-6 mt-2">
          {currentLabel}
        </div>
      </div>
    </div>
  );
};

const MultiScaleQuestion = ({ question, onAnswer }) => {
  const [answers, setAnswers] = useState({});

  useEffect(() => {
    // Pre-fill answers to enable the button initially
    const initialAnswers = {};
    question.subQuestions.forEach(sub => {
      initialAnswers[sub.id] = 3;
    });
    setAnswers(initialAnswers);
  }, [question.subQuestions]);

  const handleSubAnswerChange = (subId, value) => {
    setAnswers(prev => ({ ...prev, [subId]: value }));
  };

  const handleSubmit = () => {
    // Pass the raw answers object, calculation is now centralized.
    onAnswer(answers);
  };

  const allAnswered = Object.keys(answers).length === question.subQuestions.length;

  return (
    <motion.div>
      {question.subQuestions.map((sub, index) => (
         <motion.div
            key={sub.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 * index }}
          >
            <SubQuestion
              sub={sub}
              value={answers[sub.id]}
              onChange={handleSubAnswerChange}
              dimension={question.dimension}
            />
        </motion.div>
      ))}
      <div className="flex justify-center pt-8">
        <Button
          onClick={handleSubmit}
          disabled={!allAnswered}
          className="bg-amber-600 hover:bg-amber-700 px-8 py-3 text-lg font-semibold disabled:opacity-50"
        >
          繼續
        </Button>
      </div>
    </motion.div>
  );
};

export default MultiScaleQuestion;
