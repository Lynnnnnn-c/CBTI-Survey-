import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';
import MultiScaleQuestion from './MultiScaleQuestion';
import { ChevronLeft } from 'lucide-react';

export default function QuestionCard({ question, onAnswer, onBack, currentQuestion, totalQuestions }) {
  const [selectedScale, setSelectedScale] = useState(null);

  const handleScaleAnswer = (value) => {
    if (value === null) return;
    onAnswer(value);
  };

  const handleOptionAnswer = (score) => {
    onAnswer(score);
  };

  const currentScaleLabel = question.type === 'scale' && selectedScale !== null 
    ? question.scaleOptions.find(opt => opt.value === selectedScale)?.label 
    : "請拖動滑桿選擇";

  return (
    <motion.div
      key={question.id}
      initial={{ opacity: 0, x: 50 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -50 }}
      transition={{ duration: 0.4, ease: "easeOut" }}
      className="w-full max-w-4xl mx-auto"
    >
      <Card className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl">
        <CardContent className="p-8 md:p-12 relative">
          {/* Back Button */}
          {currentQuestion > 1 && (
            <motion.div
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
              className="absolute top-6 left-4 md:top-8 md:left-8"
            >
              <Button
                variant="ghost"
                size="icon"
                onClick={onBack}
                className="rounded-full text-slate-500 hover:bg-slate-100 hover:text-slate-800"
                aria-label="Go to previous question"
              >
                <ChevronLeft className="w-6 h-6" />
              </Button>
            </motion.div>
          )}

          {/* Progress indicator */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-4">
              <span className="text-sm font-medium text-slate-600">
                Question {currentQuestion} of {totalQuestions}
              </span>
              <span className="text-sm font-medium text-amber-600">
                {Math.round((currentQuestion / totalQuestions) * 100)}%
              </span>
            </div>
            <div className="w-full bg-slate-200 rounded-full h-2">
              <motion.div
                className="bg-gradient-to-r from-amber-500 to-amber-600 h-2 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${(currentQuestion / totalQuestions) * 100}%` }}
                transition={{ duration: 0.6, ease: "easeOut" }}
              />
            </div>
          </div>

          {/* Question */}
          <motion.h2 
            className="text-2xl md:text-3xl font-bold text-slate-900 mb-8 leading-relaxed text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            {question.question}
          </motion.h2>

          {/* Note for specific questions */}
          {question.note && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.25 }}
              className="mb-6 p-4 bg-amber-50 border border-amber-200 rounded-lg"
            >
              <p className="text-sm text-amber-800 leading-relaxed">
                {question.note}
              </p>
            </motion.div>
          )}
          
          {/* Multi-Scale Question */}
          {question.type === "multi-scale" && (
            <MultiScaleQuestion question={question} onAnswer={onAnswer} />
          )}

          {/* Scale Question */}
          {question.type === "scale" && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="space-y-6"
            >
              <div className="space-y-4 pt-4">
                <Slider
                  defaultValue={question.scaleOptions.length > 1 ? [Math.ceil(question.scaleOptions.length / 2) + question.scaleOptions[0].value - 1] : [question.scaleOptions[0].value]}
                  min={question.scaleOptions[0].value}
                  max={question.scaleOptions[question.scaleOptions.length - 1].value}
                  step={1}
                  onValueChange={(value) => setSelectedScale(value[0])}
                  className="py-2"
                />
                <div className="flex justify-between text-xs text-slate-500 mt-1">
                  <span>{question.scaleOptions[0].label}</span>
                  <span>{question.scaleOptions[question.scaleOptions.length - 1].label}</span>
                </div>
                <div className="text-center text-lg font-semibold text-amber-700 h-8 mt-2">
                  {currentScaleLabel}
                </div>
              </div>
              
              {/* Continue button */}
              <div className="flex justify-center pt-6">
                <Button
                  onClick={() => handleScaleAnswer(selectedScale)}
                  disabled={selectedScale === null}
                  className="bg-amber-600 hover:bg-amber-700 px-8 py-3 text-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  繼續
                </Button>
              </div>
            </motion.div>
          )}

          {/* Multiple Choice Options */}
          {question.type !== "scale" && question.type !== "multi-scale" && question.options && (
            <div className="space-y-4">
              {question.options.map((option, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 + index * 0.1 }}
                >
                  <Button
                    variant="outline"
                    className="w-full p-6 text-left justify-start h-auto border-slate-200 hover:border-amber-400 hover:bg-amber-50 transition-all duration-200 group"
                    onClick={() => handleOptionAnswer(option.score)}
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-8 h-8 rounded-full bg-slate-100 group-hover:bg-amber-100 flex items-center justify-center flex-shrink-0 transition-colors">
                        <span className="text-sm font-semibold text-slate-600 group-hover:text-amber-700">
                          {String.fromCharCode(65 + index)}
                        </span>
                      </div>
                      <span className="text-slate-700 group-hover:text-slate-900 font-medium leading-relaxed">
                        {option.text}
                      </span>
                    </div>
                  </Button>
                </motion.div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}
